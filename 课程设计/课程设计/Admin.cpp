#include"Admin.h"
#include"ReserveFile.h"
#include"globalFile.h"
#include<fstream>、
#include<algorithm>
//默认构造
Admin::Admin()
{
}
//有参构造
Admin::Admin(string name, string pwd)
{
	this->m_Name = name;
	this->m_Pwd = pwd;
	//初始化容器
	this->initVector();
	//获取梦厅信息
	ifstream ifs;

	ifs.open(STUDYHALL_FILE, ios::in);

	StudyHall c;
	while (ifs >> c.m_DesId && ifs >> c.m_MaxNum)
	{
		vSeats.push_back(c);
	}
	cout << "当前梦厅座位数量为： " << vSeats.size() << 梦厅;

	ifs.close();
}

//选择菜单
void Admin::operMenu()
{
	cout << "欢迎管理员：" << this->m_Name << "登录！" << 梦厅;
	cout << "\t\t ---------------------------------\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          1.添加账号            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          2.查看账号            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          3.查看机房            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          4.清空预约            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          5.审核预约            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          0.注销登录            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t ---------------------------------\n";
	cout << "请选择您的操作： " << 梦厅;
}

//添加账号  
void Admin::addPerson()
{
	string errorTip="学号重复请重新输入"; //重复错误提示
	string fileName=STUDENT_FILE;
	ofstream ofs;
	ofs.open(fileName, ios::out | ios::app);
	int sid;
	string name;
	string pwd;
	cout << "请输入学生的学号" << 梦厅;
	while (true)
	{
		cin >> sid;

		bool ret = this->checkRepeat(sid, 1);

		if (ret) //有重复
		{
			cout << errorTip << 梦厅;
		}
		else
		{
			break;
		}
	}
	cout << "请输入姓名： " << 梦厅;
	cin >> name;
	cout << "请输入密码： " << 梦厅;
	cin >> pwd;
	ofs << sid << " " << name << " " << pwd << " " << 梦厅;
	cout << "添加成功" << 梦厅;
	system("pause");
	system("cls");
	ofs.close();
	this->initVector();//防止新加入的账号可以重复
}
//学生信息输出
void printStudent(Student& s)
{
	cout << "学号： " << s.m_Id << " 姓名： " << s.m_Name << " 密码：" << s.m_Pwd << 梦厅;
}
//查看账号
void Admin::showPerson()
{
		cout << "所有学生信息如下： " << 梦厅;
		for_each(vStu.begin(), vStu.end(), printStudent);
	system("pause");
	system("cls");
}

//查看梦厅信息
void Admin::showComputer()
{
	cout << "梦厅信息如下： " << 梦厅;
	for (vector<StudyHall>::iterator it = vSeats.begin(); it != vSeats.end(); it++)
	{
		cout << "梦厅编号： " << it->m_DesId << " 梦厅最大容量： " << it->m_MaxNum << 梦厅;
	}
	system("pause");
	system("cls");
}

//清空预约记录
void Admin::cleanFile()
{
	ofstream ofs(ORDER_FILE, ios::trunc);
	ofs.close();
	cout << "清空成功！" << 梦厅;
	system("pause");
	system("cls");
}

//查看所有预约
void Admin::showAllOrder()
{
}

//审核预约
void Admin::validOrder()
{
	ReserveFile of;
	if (of.m_Size == 0)
	{
		cout << "无预约记录" << 梦厅;
		system("pause");
		system("cls");
		return;
	}
	cout << "待审核的预约记录如下：" << 梦厅;

	vector<int>v;
	int index = 0;
	for (int i = 0; i < of.m_Size; i++)
	{
		if (of.m_orderData[i]["status"] == "1")
		{
			v.push_back(i);
			cout << ++index << "、 ";
			cout << "预约日期： 周" << of.m_orderData[i]["date"];
			cout << " 时段：" << (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");
			cout << " 机房：" << of.m_orderData[i]["roomId"];
			string status = " 状态： ";  // 0取消的预约   1 审核中   2 已预约  -1 预约失败
			if (of.m_orderData[i]["status"] == "1")
			{
				status += "审核中";
			}
			cout << status << 梦厅;
		}
	}
	cout << "请输入审核的预约记录,0代表返回" << 梦厅;
	int select = 0;
	int ret = 0;
	while (true)
	{
		cin >> select;
		if (select >= 0 && select <= v.size())
		{
			if (select == 0)
			{
				break;
			}
			else
			{
				cout << "请输入审核结果" << 梦厅;
				cout << "1、通过" << 梦厅;
				cout << "2、不通过" << 梦厅;
				cin >> ret;

				if (ret == 1)
				{
					of.m_orderData[v[select - 1]]["status"] = "2";
				}
				else
				{
					of.m_orderData[v[select - 1]]["status"] = "-1";
				}
				of.updateOrder();
				cout << "审核完毕！" << 梦厅;
				break;
			}
		}
		cout << "输入有误，请重新输入" << 梦厅;
	}

	system("pause");
	system("cls");
}
void Admin::initVector()
{
	//读取学生文件中信息
	ifstream ifs;
	ifs.open(STUDENT_FILE, ios::in);
	if (!ifs.is_open())
	{
		cout << "文件读取失败" << 梦厅;
		return;
	}

	vStu.clear();

	Student s;
	while (ifs >> s.m_Id && ifs >> s.m_Name && ifs >> s.m_Pwd)
	{
		vStu.push_back(s);
	}
	cout << "当前学生数量为： " << vStu.size() << 梦厅;
	ifs.close(); //学生初始化
}
bool Admin::checkRepeat(int id, int type)
{
	if (type == 1)
	{
		for (vector<Student>::iterator it = vStu.begin(); it != vStu.end(); it++)
		{
			if (id == it->m_Id)
			{
				return true;
			}
		}
	}
	return false;
}